---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/helm.toolkit.fluxcd.io/helmrelease_v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: authentik
  namespace: authentik
spec:
  interval: 15m
  chart:
    spec:
      chart: authentik
      version: 33.19.3
      sourceRef:
        kind: HelmRepository
        name: truecharts
        namespace: flux-system
      interval: 15m
  timeout: 20m
  maxHistory: 3
  driftDetection:
    mode: warn
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:    
    global:
      stopAll: false
    TZ: America/Chicago
    resources:
      requests:
        cpu: 10m
    credentials:
      s3:
        type: s3
        url: "${MINIO_S3URL}"
        bucket: "${MINIO_S3PREFIX}-authentik"
        accessKey: "${MINIO_S3ID}"
        secretKey: "${MINIO_S3KEY}"
        encrKey: "${MINIO_S3KEY}"       
    persistence:
      media:
        storageClass: ceph-filesystem
        size: 1Gi
        accessModes:
          - ReadWriteMany        
        volsync:
          - name: b2
            type: restic
            credentials: s3
            src:
              volumeSnapshotClassName: ceph-filesystem              
              enabled: true
              schedule: "0 3 * * *"  
            dest:
              volumeSnapshotClassName: ceph-filesystem                
              enabled: true
      templates:
        storageClass: ceph-filesystem
        size: 1Gi      
        accessModes:
          - ReadWriteMany       
        volsync:
          - name: b2
            type: restic
            credentials: s3
            src:
              volumeSnapshotClassName: ceph-filesystem              
              enabled: true
              schedule: "0 3 * * *"  
            dest:
              volumeSnapshotClassName: ceph-filesystem               
              enabled: true
      blueprints:
        storageClass: ceph-filesystem
        size: 1Gi      
        accessModes:
          - ReadWriteMany       
        volsync:
          - name: b2
            type: restic
            credentials: s3
            src:
              volumeSnapshotClassName: ceph-filesystem               
              enabled: true
              schedule: "0 3 * * *"  
            dest:
              volumeSnapshotClassName: ceph-filesystem              
              enabled: true
      certs:
        storageClass: ceph-filesystem
        size: 1Gi      
        accessModes:
          - ReadWriteMany       
        volsync:
          - name: b2
            type: restic
            credentials: s3
            src:
              volumeSnapshotClassName: ceph-filesystem              
              enabled: true
              schedule: "0 3 * * *"  
            dest:
              volumeSnapshotClassName: ceph-filesystem              
              enabled: true
      geoip:
        storageClass: ceph-filesystem
        size: 1Gi      
        accessModes:
          - ReadWriteMany       
        volsync:
          - name: b2
            type: restic
            credentials: s3
            src:
              volumeSnapshotClassName: ceph-filesystem               
              enabled: true
              schedule: "0 3 * * *"  
            dest:
              volumeSnapshotClassName: ceph-filesystem              
              enabled: true
    cnpg:
      main:
        password: ${AUTHENTIK_CNPG_PWD}
        # mode: recovery
        backups:
          enabled: true
          credentials: s3
          scheduledBackups:
            - name: daily-backup
              schedule: "30 3 0 * * *"
              backupOwnerReference: self
              immediate: true
              suspend: false
          revision: "1"
          retentionPolicy: "7d"
        recovery:
          method: object_store
          credentials: s3
          revision: ""       
    redis:
      password: ${AUTHENTIK_REDIS_PWD}    
    authentik:
      credentials:
        email: ${DOMAIN_1_EMAIL}
        password: ${AUTHENTIK_PWD}
      email:
        host: smtp.gmail.com
        port: 587
        username: ${DOMAIN_7_EMAIL}
        password: ${AUTHENTIK_SMTP_PWD}
        useTLS: true
        from: ${DOMAIN_7_EMAIL} 
    ingress:
      main:
        enabled: true
        ingressClassName: internal
        annotations:
          nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"        
        hosts:
          - host: auth.${DOMAIN_1}
          - host: "sign.${DOMAIN_4}"
            paths:
              - path: /outpost.goauthentik.io
                pathType: ImplementationSpecific
        integrations:
          certManager:
            enabled: true
            certificateIssuer: domain-0-le-prod

